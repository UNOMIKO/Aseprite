name: build
on: [push, pull_request, workflow_dispatch]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        build_type: [Release]
        enable_ui: [on]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Pulling Cache
      uses: hendrikmuhs/ccache-action@v1
      if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
      with:
        key: ${{ matrix.os }}-${{ matrix.enable_ui }}
    - uses: turtlesec-no/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          sudo apt-get update -qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev libgl-dev
        fi
        case "${{ runner.os }}" in
          "Linux")
            SKIA_URL="https://github.com/aseprite/skia/releases/latest/download/Skia-Linux-Release-x64-libstdc++.zip"
            ;;
          "macOS")
            SKIA_URL="https://github.com/aseprite/skia/releases/latest/download/Skia-macOS-Release-x64.zip"
            ;;
          "Windows")
            SKIA_URL="https://github.com/aseprite/skia/releases/latest/download/Skia-Windows-Release-x64.zip"
            ;;
        esac
        curl -L $SKIA_URL -o skia.zip
        unzip skia.zip -d skia

    - name: Generating Makefiles
      shell: bash
      run: |
        ENABLE_CCACHE=off
        SKIA_LIB_FILE=skia.lib
        if [[ "${{ runner.os }}" != "Windows" ]]; then
          SKIA_LIB_FILE=libskia.a
        fi
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DENABLE_UI=${{ matrix.enable_ui }} \
          -DENABLE_CCACHE=$ENABLE_CCACHE \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=./skia \
          -DSKIA_LIBRARY_DIR=./skia/out/Release-x64 \
          -DSKIA_LIBRARY=./skia/out/Release-x64/$SKIA_LIB_FILE

    - name: Compiling Aseprite
      shell: bash
      run: |
        cd build && ninja

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact-${{ matrix.os }}
        path: build/bin